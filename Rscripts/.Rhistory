grid.arrange(graph_list[[1]] + theme(legend.position="none"),
graph_list[[2]] + theme(legend.position="none"),
graph_list[[3]] + theme(legend.position="none"),
graph_list[[4]] + theme(legend.position="none"),
graph_list[[5]] + theme(legend.position="none"),
graph_list[[6]] + theme(legend.position="none"),
graph_list[[7]] + theme(legend.position="none"),
graph_list[[8]] + theme(legend.position="none"), ncol = ncol)
}
graph_clust(u10_b$graphs, ncol = 2)
pbmc_beads <- asinh(pbmc_5000$Ce140Di)
pbmc_b <- clust_plots(pbmc_beads, 2)
graph_clust(pbmc_b$graphs, ncol = 2)
u10_offset <- asinh(u10_5000$Offset)
u10_o <- clust_plots(u10_offset, 2)
graph_clust(u10_o$graphs, ncol = 2)
u10_o <- clust_plots(u10_offset, 3)
graph_clust(u10_o$graphs, ncol = 2)
pbmc_offset <- asinh(pbmc_5000$Offset)
pbmc_o <- clust_plots(pbmc_offset, 3)
graph_clust(pbmc_o$graphs, ncol = 2)
u10_Width <- asinh(u10_5000$Width)
u10_w <- clust_plots(u10_Width, 2)
graph_clust(u10_w$graphs, ncol = 2)
pbmc_Width <- asinh(pbmc_5000$Width)
pbmc_w <- clust_plots(pbmc_Width, 2)
graph_clust(pbmc_w$graphs, ncol = 2)
u10_center <- asinh(u10_5000$center)
u10_c <- clust_plots(u10_center, 2)
graph_clust(u10_c$graphs, ncol = 2)
# Center
u10_center <- asinh(u10_5000$Center)
u10_c <- clust_plots(u10_center, 2)
graph_clust(u10_c$graphs, ncol = 2)
pbmc_center <- asinh(pbmc_5000$Center)
pbmc_c <- clust_plots(pbmc_center, 2)
graph_clust(pbmc_c$graphs, ncol = 2)
# dna1
u10_dna1 <- asinh(u10_5000$Ir191Di)
u10_d1 <- clust_plots(u10_dna1, 2)
graph_d1lust(u10_d1$graphs, ncol = 2)
graph_clust(u10_d1$graphs, ncol = 2)
u10_d1 <- clust_plots(u10_dna1, 3)
graph_clust(u10_d1$graphs, ncol = 3)
graph_clust(u10_d1$graphs, ncol = 2)
pbmc_dna1 <- asinh(pbmc_5000$Ir191Di)
pbmc_d1 <- clust_plots(pbmc_dna1, 2)
graph_clust(pbmc_d1$graphs, ncol = 2)
pbmc_d1 <- clust_plots(pbmc_dna1, 3)
graph_clust(pbmc_d1$graphs, ncol = 2)
# Residual
u10_Residual <- asinh(u10_5000$Residual)
u10_c <- clust_plots(u10_Residual, 2)
u10_r <- clust_plots(u10_Residual, 2)
graph_clust(u10_r$graphs, ncol = 2)
pbmc_Residual <- asinh(pbmc_5000$Residual)
pbmc_r <- clust_plots(pbmc_Residual, 2)
graph_clust(pbmc_r$graphs, ncol = 2)
# Event_length
u10_Event_length <- asinh(u10_5000$Event_length)
u10_e <- clust_plots(u10_Event_length, 2)
graph_clust(u10_e$graphs, ncol = 2)
pbmc_Event_length <- asinh(pbmc_5000$Event_length)
pbmc_e <- clust_plots(pbmc_Event_length, 2)
graph_clust(pbmc_e$graphs, ncol = 2)
# Live/dead
u10_ld <- asinh(u10_5000$Rh103Di)
u10_l <- clust_plots(u10_ld, 2)
graph_clust(u10_r$graphs, ncol = 2)
pbmc_ld <- asinh(pbmc_5000$Rh103Di)
pbmc_r <- clust_plots(pbmc_ld, 2)
graph_clust(pbmc_l$graphs, ncol = 2)
pbmc_l <- clust_plots(pbmc_ld, 2)
graph_clust(pbmc_l$graphs, ncol = 2)
# dna2
u20_dna2 <- asinh(u20_5000$Ir193Di)
u20_d2 <- clust_plots(u20_dna2, 2)
graph_clust(u20_d2$graphs, ncol = 2)
# dna2
u20_dna2 <- asinh(u20_5000$Ir193Di)
# dna2
u10_dna2 <- asinh(u10_5000$Ir193Di)
u10_d2 <- clust_plots(u10_dna2, 2)
graph_clust(u10_d2$graphs, ncol = 2)
u10_d2 <- clust_plots(u10_dna2, 3)
graph_clust(u10_d2$graphs, ncol = 2)
pbmc_dna2 <- asinh(pbmc_5000$Ir193Di)
pbmc_d2 <- clust_plots(pbmc_dna2, 2)
graph_clust(pbmc_d2$graphs, ncol = 2)
pbmc_d2 <- clust_plots(pbmc_dna2, 3)
graph_clust(pbmc_d2$graphs, ncol = 2)
# Beads
d <- dist(u10_5000$Ce140Di)
d1 <- density(asinh(u10_5000$Ce140Di))
d2 <- density(asinh(pbmc_5000$Ce140Di))
par(mfrow = c(2, 1))
plot(d1, main = "U2OS 10%")
plot(d1, main = "PBMC")
d1 <- density(asinh(u10_5000$Offset))
d2 <- density(asinh(pbmc_5000$Offset))
par(mfrow = c(2, 1))
plot(d1, main = "U2OS 10%")
plot(d1, main = "PBMC")
d1 <- density(asinh(u10_5000$Width))
d2 <- density(asinh(pbmc_5000$Width))
par(mfrow = c(2, 1))
plot(d1, main = "U2OS 10%")
plot(d1, main = "PBMC")
d1 <- density(asinh(u10_5000$Center))
d2 <- density(asinh(pbmc_5000$Center))
par(mfrow = c(2, 1))
plot(d1, main = "U2OS 10%")
plot(d1, main = "PBMC")
d1 <- density(asinh(u10_5000$Ir191Di))
d2 <- density(asinh(pbmc_5000$Ir191Di))
par(mfrow = c(2, 1))
plot(d1, main = "U2OS 10%")
plot(d1, main = "PBMC")
d1 <- density(asinh(u10_5000$Residual))
d2 <- density(asinh(pbmc_5000$Residual))
par(mfrow = c(2, 1))
plot(d1, main = "U2OS 10%")
plot(d1, main = "PBMC")
d1 <- density(asinh(u10_5000$Event_length))
d2 <- density(asinh(pbmc_5000$Event_length))
par(mfrow = c(2, 1))
plot(d1, main = "U2OS 10%")
plot(d1, main = "PBMC")
d1 <- density(asinh(u10_5000$Rh103Di))
d2 <- density(asinh(pbmc_5000$Rh103Di))
par(mfrow = c(2, 1))
plot(d1, main = "U2OS 10%")
plot(d1, main = "PBMC")
d1 <- density(asinh(u10_5000$Ir193Di))
d2 <- density(asinh(pbmc_5000$Ir193Di))
par(mfrow = c(2, 1))
plot(d1, main = "U2OS 10%")
plot(d1, main = "PBMC")
1 - (0.95)^4
?p.adjust
p.adjust
c(0.0635
,)
p1 <- c(0.0635, 0.1078, 0.0094, 0.1078, 0.0187, 0.0119)
p.adjust(p1, method = "BH")
p2 <- c(0.0354, 0.1078, 0.3865, 0.1078, 0.0187, 0.0119)
p.adjust(p2, method = "BH")
1 - (0.95)^6
library(flowCore)
library(ggcyto)
library(ggfortify)
library(graphics)
library(dplyr)
library(scales)
library(dendextend)
library(gridExtra)
# The point of this script is to examine the QA measures for the data. Each data
# data file has measures of Center, offset, Width, and Residual that can be used
# for this task. Thise are based on the measures of Ir-193 and Ir-191. These are
# isotopes related to DNA staining. The idea is that the shape of pushes in a
# pulse should be normal. The residual measure is the difference between the
# pushes and the the fitted normal distribution. Doublets tend to have high
# residuals and long event length.
path <- "C:/Users/jlundell/Dropbox (Partners HealthCare)/Data for CTC detection with CyTOF/Normalized-20201118"
path <- "G:/My Drive/CTC_detection_CyTOF/Data for CTC detection with CyTOF/Normalized-20201118"
f <- list.files(path, full.names = TRUE, pattern = ".fcs")
f
u0.01 <- read.FCS(f[1]) #163Dy
u0.02 <- read.FCS(f[2]) #163Dy
u0.1 <- read.FCS(f[3]) #Ta-181
u1 <- read.FCS(f[4]) #Ta-181
u10 <- read.FCS(f[5]) #Ta-181
a673 <- read.FCS(f[6]) #Er-170
gd2 <- read.FCS(f[7]) #Dy-163
pbmc <- read.FCS(f[8]) #Ta-181
u <- read.FCS(f[9]) #Dy-163
wb <- read.FCS(f[10]) #Cd-106, Nd-144, Pr-141
class(u10)
head(u10)
summary(u10)
dim(u10)
# events parameters
# 448201         71
length(colnames(u10))
colnames(u10)[grep("Er", colnames(u10))]
colnames(u10)[grep("Dy", colnames(u10))]
colnames(u10)[grep("Cd", colnames(u10))]
colnames(u10)[grep("Nd", colnames(u10))]
colnames(u10)[grep("Pr", colnames(u10))]
colnames(u10)[grep("Ta", colnames(u10))]
colnames(u10)[grep("Ir", colnames(u10))]
colnames(u10)[grep("Ir", colnames(u10))]
u10d <- as.data.frame(u10@exprs)
pbmcd <- as.data.frame(pbmc@exprs)
# downsample
u10_5000 <- u10d[sample(1:nrow(u10d), 5000), ]
pbmc_5000 <- pbmcd[sample(1:nrow(pbmcd), 5000), ]
par(mfrow = c(1, 2))
d1 <- density(asinh(u10_5000$Ce140Di))
d2 <- density(asinh(pbmc_5000$Ce140Di))
plot(d1, main = "U2OS 10%")
plot(d2, main = "PBMC")
d1 <- density(asinh(u10_5000$Offset))
d2 <- density(asinh(pbmc_5000$Offset))
plot(d1, main = "U2OS 10%")
plot(d2, main = "PBMC")
d1 <- density(asinh(u10_5000$Width))
d2 <- density(asinh(pbmc_5000$Width))
plot(d1, main = "U2OS 10%")
plot(d2, main = "PBMC")
d1 <- density(asinh(u10_5000$Center))
d2 <- density(asinh(pbmc_5000$Center))
plot(d1, main = "U2OS 10%")
plot(d2, main = "PBMC")
d1 <- density(asinh(u10_5000$Ir191Di))
d2 <- density(asinh(pbmc_5000$Ir191Di))
plot(d1, main = "U2OS 10%")
plot(d2, main = "PBMC")
d1 <- density(asinh(u10_5000$Residual))
d2 <- density(asinh(pbmc_5000$Residual))
plot(d1, main = "U2OS 10%")
plot(d2, main = "PBMC")
d1 <- density(asinh(u10_5000$Event_length))
d2 <- density(asinh(pbmc_5000$Event_length))
plot(d1, main = "U2OS 10%")
plot(d2, main = "PBMC")
d1 <- density(asinh(u10_5000$Rh103Di))
d2 <- density(asinh(pbmc_5000$Rh103Di))
plot(d1, main = "U2OS 10%")
plot(d2, main = "PBMC")
u10_ld <- asinh(u10_5000$Rh103Di)
u10_l <- clust_plots(u10_ld, 2)
graph_clust(u10_r$graphs, ncol = 2)
graph_clust <- function(graph_list, ncol = 3) {
grid.arrange(graph_list[[1]] + theme(legend.position="none"),
graph_list[[2]] + theme(legend.position="none"),
graph_list[[3]] + theme(legend.position="none"),
graph_list[[4]] + theme(legend.position="none"),
graph_list[[5]] + theme(legend.position="none"),
graph_list[[6]] + theme(legend.position="none"),
graph_list[[7]] + theme(legend.position="none"),
graph_list[[8]] + theme(legend.position="none"), ncol = ncol)
}
clust_plots <- function(dat, k = 2) {
d <- dist(dat)
ward <- hclust(d, method = "ward.D")
wardD2 <- hclust(d, method = "ward.D2")
sing <- hclust(d, method = "single")
complete <- hclust(d, method = "complete")
average <- hclust(d, method = "average")
mcquitty <- hclust(d, method = "mcquitty")
med <- hclust(d, method = "median")
centroid <- hclust(d, method = "centroid")
dat <- data.frame(index = 1:length(dat), data = dat)
dat$ward <- cutree(ward, k = k)
dat$wardD2 <- cutree(wardD2, k = k)
dat$single <- cutree(sing, k = k)
dat$complete <- cutree(complete, k = k)
dat$average <- cutree(average, k = k)
dat$mcquitty <- cutree(mcquitty, k = k)
dat$median <- cutree(med, k = k)
dat$centroid <- cutree(centroid, k = k)
tree <- colnames(dat)[3:10]
g <- NULL
for(i in 1:8) {
tmp <- dat[, c(1, 2, i + 2)]
colnames(tmp)[3] <- "tree"
g[[i]] <- ggplot(tmp, aes(x = index, y = data)) +
geom_point(aes(color = as.factor(tree)), alpha = 0.5) +
scale_color_brewer(palette = "Dark2") +
ggtitle(tree[i]) +
theme_bw()
}
list(graphs = g, data = dat)
}
# Live/dead
u10_ld <- asinh(u10_5000$Rh103Di)
u10_l <- clust_plots(u10_ld, 2)
graph_clust(u10_r$graphs, ncol = 2)
graph_clust(u10_l$graphs, ncol = 2)
citation("AppliedPredictiveModeling")
?rpois
BiocManager::install(c("scran", "scater"))
setwd("~/")
devtools::install_github("DataSlingers/clustRviz")
knitr::opts_chunk$set(echo = TRUE)
library(NMF)
library(ggplot2)
library(umap)
load("../UnsupL_SISBID_2021.Rdata")
# understand the data a bit
dim(author)
colnames(author)
unique(rownames(author))
TrueAuth = as.factor(rownames(author))
head(author[, 1:10])
hist(author[,colnames(author)=="the"],breaks=25,main="Frequency of word \"the\"",xlab = "Word Counts")
hist(author[,colnames(author)=="a"],breaks=25,main="Frequency of word \"a\"",xlab = "Word Counts")
hist(author[,colnames(author)=="and"],breaks=25,main="Frequency of word \"and\"",xlab = "Word Counts")
hist(author[,colnames(author)=="things"],breaks=25,main="Frequency of word \"things\"",xlab = "Word Counts")
par(mfrow = c(2, 2))
hist(author[,colnames(author)=="the"],breaks=25,main="Frequency of word \"the\"",xlab = "Word Counts")
hist(author[,colnames(author)=="a"],breaks=25,main="Frequency of word \"a\"",xlab = "Word Counts")
hist(author[,colnames(author)=="and"],breaks=25,main="Frequency of word \"and\"",xlab = "Word Counts")
hist(author[,colnames(author)=="things"],breaks=25,main="Frequency of word \"things\"",xlab = "Word Counts")
head(author[, 70])
head(author[, 70], 50)
AuthorData = author[,1:69]
knitr::opts_chunk$set(echo = TRUE)
theme_set(theme_bw())
sv = svd(AuthorData)
V = sv$v
Z = AuthorData%*%V
# projected matrix
PCData = data.frame(cbind(Z[,1],Z[,2],rownames(AuthorData)),stringsAsFactors = FALSE)
colnames(PCData) = c("PC1","PC2","Author")
PCData$PC1 = as.numeric(PCData$PC1)
PCData$PC2 = as.numeric(PCData$PC2)
# plot
ggplot(PCData) +
geom_point(mapping=aes(x = PC1,y= PC2,color = Author,shape= Author))
?scale_color_brewer
sv = svd(AuthorData)
V = sv$v
Z = AuthorData%*%V
# projected matrix
PCData = data.frame(cbind(Z[,1],Z[,2],rownames(AuthorData)),stringsAsFactors = FALSE)
colnames(PCData) = c("PC1","PC2","Author")
PCData$PC1 = as.numeric(PCData$PC1)
PCData$PC2 = as.numeric(PCData$PC2)
# plot
ggplot(PCData) +
geom_point(mapping=aes(x = PC1,y= PC2,color = Author,shape= Author)) +
scale_color_brewer(palette = "Dark2")
# projected matrix
PCData = data.frame(cbind(Z[,1],Z[,2],rownames(AuthorData)),stringsAsFactors = FALSE)
colnames(PCData) = c("PC1","PC2","Author")
PCData$PC1 = as.numeric(PCData$PC1)
PCData$PC2 = as.numeric(PCData$PC2)
# plot
ggplot(PCData) +
geom_point(mapping=aes(x = PC1,y= PC2,color = Author,shape= Author)) +
scale_color_brewer(palette = "Dark2")
PCData = data.frame(cbind(Z[,1],Z[,2],rownames(AuthorData)),stringsAsFactors = FALSE)
colnames(PCData) = c("PC1","PC2","Author")
PCData$PC1 = as.numeric(PCData$PC1)
PCData$PC2 = as.numeric(PCData$PC2)
# plot
ggplot(PCData) +
geom_point(mapping=aes(x = PC1,y= PC2,color = Author,shape= Author)) +
scale_color_brewer(palette = "Dark2")
Dmat = dist(log(AuthorData+1),method="canberra")
mdsres = cmdscale(Dmat,k=2)
# MDS matrix
MDSData = data.frame(cbind(mdsres[,1],mdsres[,2],rownames(AuthorData)),
stringsAsFactors = FALSE)
colnames(MDSData) = c("MDS1","MDS2","Author")
MDSData$MDS1 = as.numeric(MDSData$MDS1)
MDSData$MDS2 = as.numeric(MDSData$MDS2)
# plot
ggplot(MDSData) +
geom_point(mapping=aes(x = MDS1,y= MDS2,color = Author,shape= Author))
Dmat = dist(log(AuthorData+1),method="canberra")
mdsres = cmdscale(Dmat,k=2)
# MDS matrix
MDSData = data.frame(cbind(mdsres[,1],mdsres[,2],rownames(AuthorData)),
stringsAsFactors = FALSE)
colnames(MDSData) = c("MDS1","MDS2","Author")
MDSData$MDS1 = as.numeric(MDSData$MDS1)
MDSData$MDS2 = as.numeric(MDSData$MDS2)
# plot
ggplot(MDSData) +
geom_point(mapping=aes(x = MDS1,y= MDS2,color = Author,shape= Author)) +
scale_color_brewer(palette = "Dark2")
MDSData = data.frame(cbind(mdsres[,1],mdsres[,2],rownames(AuthorData)),
stringsAsFactors = FALSE)
colnames(MDSData) = c("MDS1","MDS2","Author")
MDSData$MDS1 = as.numeric(MDSData$MDS1)
MDSData$MDS2 = as.numeric(MDSData$MDS2)
# plot
ggplot(MDSData) +
geom_point(mapping=aes(x = MDS1,y= MDS2,color = Author,shape= Author)) +
scale_color_brewer(palette = "Dark2")
detach("package:NMF", unload = TRUE)
library(NMF)
library(ggplot2)
library(umap)
AuthorUMAP = umap(AuthorData)
# UMAP matrix
UMAPData = data.frame(cbind(AuthorUMAP$layout[,1],AuthorUMAP$layout[,2],
rownames(AuthorData)),stringsAsFactors = FALSE)
colnames(UMAPData) = c("UMAP1","UMAP2","Author")
UMAPData$UMAP1 = as.numeric(UMAPData$UMAP1)
UMAPData$UMAP2 = as.numeric(UMAPData$UMAP2)
# plot
ggplot(UMAPData) +
geom_point(mapping=aes(x = UMAP1,y= UMAP2,color = Author,shape= Author)) +
scale_color_brewer(palette = "Dark2")
Dmat = dist(t(AuthorData),method="canberra")
mdsresW = cmdscale(Dmat,k=2)
# MDS matrix for words
MDSDataW = data.frame(cbind(mdsresW[,1],mdsresW[,2],colnames(AuthorData)),
stringsAsFactors = FALSE)
colnames(MDSDataW) = c("MDS1","MDS2","Word")
MDSDataW$MDS1 = as.numeric(MDSDataW$MDS1)
MDSDataW$MDS2 = as.numeric(MDSDataW$MDS2)
ggplot(MDSDataW) +
geom_text(mapping=aes(x = MDS1,y= MDS2,label = Word)) +
scale_color_brewer(palette = "Dark2")
?cmdscale
K = 4
km = kmeans(AuthorData,centers=K)
table(km$cluster,TrueAuth)
PredData = data.frame(cbind(MDSData[,1:2],km$cluster,rownames(AuthorData)))
colnames(PredData) = c("MDS1","MDS2","PredictedLabel","TrueAuthor")
PredData$PredictedLabel = factor(PredData$PredictedLabel)
ggplot(PredData) +
geom_point(mapping=aes(x = MDS1,y= MDS2,color = PredictedLabel,shape= TrueAuthor)) +
ggtitle("Clustering results by K-means with K = 4") +
theme(plot.title = element_text(hjust = 0.5))
PredData = data.frame(cbind(MDSData[,1:2],km$cluster,rownames(AuthorData)))
colnames(PredData) = c("MDS1","MDS2","PredictedLabel","TrueAuthor")
PredData$PredictedLabel = factor(PredData$PredictedLabel)
ggplot(PredData) +
geom_point(mapping=aes(x = MDS1,y= MDS2,color = PredictedLabel,shape= TrueAuthor)) +
ggtitle("Clustering results by K-means with K = 4") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_brewer(palette = "Dark2")
Dmat = dist(AuthorData,method="canberra")
com.hc = hclust(Dmat,method="complete")
res.com = cutree(com.hc,4)
table(res.com,TrueAuth)
plot(com.hc,cex=.5)
Dmat = dist(AuthorData,method="canberra")
ward.hc = hclust(Dmat,method="ward.D")
res.ward = cutree(ward.hc,4)
table(res.ward,TrueAuth)
plot(ward.hc,cex=.5)
PredData = data.frame(cbind(MDSData[,1:2],res.ward,rownames(AuthorData)))
colnames(PredData) = c("MDS1","MDS2","PredictedLabel","TrueAuthor")
PredData$PredictedLabel = factor(PredData$PredictedLabel)
ggplot(PredData) +
geom_point(mapping=aes(x = MDS1,y= MDS2,color = PredictedLabel,shape= TrueAuthor)) +
ggtitle("Clustering results by hierarchical clustering with K = 4") +
theme(plot.title = element_text(hjust = 0.5))
PredData = data.frame(cbind(MDSData[,1:2],res.ward,rownames(AuthorData)))
colnames(PredData) = c("MDS1","MDS2","PredictedLabel","TrueAuthor")
PredData$PredictedLabel = factor(PredData$PredictedLabel)
ggplot(PredData) +
geom_point(mapping=aes(x = MDS1,y= MDS2,color = PredictedLabel,shape= TrueAuthor)) +
ggtitle("Clustering results by hierarchical clustering with K = 4") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_brewer(palette = "Dark2")
heatmap(AuthorData,
distfun=function(x)dist(x,method="canberra"),
hclustfun=function(x)hclust(x,method="ward.D"))
heatmap(log(AuthorData+1),
distfun=function(x)dist(x,method="canberra"),
hclustfun=function(x)hclust(x,method="ward.D"))
K = 4
nmffit = nmf(AuthorData,rank=K)
W = basis(nmffit)
H = coef(nmffit)
cmap = apply(W,1,which.max)
table(cmap,TrueAuth)
basismap(nmffit,annRow=rownames(AuthorData),scale="col",legend=FALSE)
coefmap(nmffit,annCol=colnames(AuthorData),scale="col",legend=FALSE)
basismap(nmffit,annRow=rownames(AuthorData),scale="col",legend=T)
coefmap(nmffit,annCol=colnames(AuthorData),scale="col",legend=T)
296.12=335.49
296.12+335.49
5^4
install.packages("breakaway")
library(breakaway)
devtools::install_github("adw96/breakaway")
BiocManager::install("phyloseq")
install.packages("breakaway")
devtools::install_github("adw96/breakaway")
library(breakaway)
vignette("breakaway")
data(toy_otu_table)
otu_data <- toy_otu_table
frequencytablelist <- build_frequency_count_tables(otu_data)
head(frequencytablelist[[63]])
breakaway(frequencytablelist[[1]])
breakaway(frequencytablelist[[2]])
plot(breakaway(frequencytablelist[[1]]))
?chao_bunge
data(apples)
head(apples)
apples10 <- apples
apples10$frequency <- 10 * apples10$frequency
chao_bunge(apples)
chao_bunge(apples10)
apples100 <- apples
apples100$frequency <- 10 * apples10$frequency
chao_bunge(apples100)
library(ggplot2)
?geom_bar
view(diamonds)
library(tidyverse)
shiny::runApp('G:/My Drive/CTC_detection_CyTOF/rscripts/cytofQC_tests/umap_gdp_brush')
runApp('G:/My Drive/CTC_detection_CyTOF/rscripts/cytofQC_tests/umap_gdp_brush')
runApp('G:/My Drive/CTC_detection_CyTOF/rscripts/cytofQC_tests/umap_gdp_brush')
runApp('G:/My Drive/CTC_detection_CyTOF/rscripts/cytofQC_tests/cytofQCtest_brush_all')
shiny::runApp('G:/My Drive/CTC_detection_CyTOF/rscripts/cytofQC_tests/cytofQCtest_brush_all')
setwd("C:/Users/jflun/Dropbox/model_tuning_research/JSS_paper/jss-article-rnw_v2")
library(tinytex)
install.packages(c("animation", "backports", "blogdown", "brio", "broom", "bslib", "car", "caret", "cli", "clue", "clustree", "conflicted", "conquer", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "crul", "deldir", "dendextend", "deSolve", "devtools", "digest", "downlit", "DT", "dtplyr", "entropy", "fda", "fdrtool", "fields", "fs", "future", "GA", "geosphere", "gert", "ggfortify", "ggpmisc", "git2r", "glmnet", "glue", "gmp", "graphlayouts", "gsl", "heatmaply", "Hmisc", "htmlTable", "igraph", "immunarch", "irlba", "laeken", "lmtest", "lubridate", "manipulateWidget", "mclust", "MCMCpack", "memoise", "memuse", "mgcv", "mice", "microbenchmark", "misc3d", "mvtnorm", "ncdf4", "nloptr", "optimx", "parallelly", "partitions", "pkgbuild", "pkgload", "plotly", "PMCMR", "PMCMRplus", "pracma", "PSCBS", "qtl", "raster", "rbibutils", "RcppArmadillo", "Rdpack", "readr", "relations", "remotes", "rex", "rgl", "rio", "rjags", "rlang", "Rmpfr", "rsample", "RSQLite", "rvcheck", "rvest", "sda", "seriation", "servr", "sessioninfo", "sets", "sf", "shiny", "sitmo", "slam", "sn", "snow", "sodium", "sp", "spData", "spdep", "stringi", "systemfonts", "testthat", "tibble", "tidymodels", "tidytree", "tinytex", "tseries", "TSP", "tzdb", "usethis", "uuid", "uwot", "V8", "vcd", "viridis", "vroom", "withr", "workflows", "xfun", "xgboost", "xml2", "yardstick", "yulab.utils"))
setwd("C:/Users/jflun/Dropbox/model_tuning_research/JSS_paper/jss-article-rnw_v2")
setwd("C:/Users/jflun/Dropbox/model_tuning_research/JSS_paper/jss-article-rnw_v2")
setwd("C:/Users/jflun/Dropbox/model_tuning_research/JSS_paper/EZtune_files/Rscripts")
